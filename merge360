#!/usr/bin/env sh

# Default values
transition_duration=3
output="merged.mp4"
transition="fade"

function help() {
    echo "Combine and crossfade 360 videos into a single spherical tagged mp4 file"
    echo "Usage: $(basename $0) [-d duration] [-t transition] [-o output] file1 file2…"
    exit 1
}

while getopts :hd:t:o: option; do
    case $option in
        d)
            transition_duration=$OPTARG;;
        t)
            transition=$OPTARG;;
        o)
            output=$OPTARG;;
        \?|h)
            help
            exit;;
    esac
done

shift $((OPTIND - 1))

if [ $# -le 1 ]
then
    help
fi

function cleanup() {
    exit_status=$?
    abort=1
    kill $ffmpeg_pid 2> /dev/null
}

function verify() {
    if ! command -v $1 &> /dev/null
    then
        echo "$1 could not be found"
        echo "install it using your package manager e.g.:"
        echo "brew install $1"
        exit 1
    fi    
}

verify ffmpeg
verify ffprobe
verify exiftool
verify bc

inputs=(); filters=();
i=0; totalframes=0; offset=0;
for file in "$@"
do
    printf "\rAnalyzing $file\033[0K\r"
    inputs+=( "-i $file" )
    duration=$(ffprobe -v error -show_entries format=duration -of default=noprint_wrappers=1:nokey=1 $file)
    framerate=$(ffprobe -v error -select_streams v:0 -show_entries stream=avg_frame_rate -of default=noprint_wrappers=1:nokey=1 $file)
    
    [[ $i != 0 ]] && shift=$transition_duration || shift=0
    frames=$(echo "($duration-$shift)*$framerate" | bc)
    totalframes=$((totalframes+frames))

    if [[ $i -gt 0 ]]
    then
        audio="[$audio_alias][${i}:a] acrossfade=d=$transition_duration"
        video="[$video_alias][${i}:v] xfade=transition=$transition:duration=$transition_duration:offset=$offset"

        if [[ $i = $(expr $# - 1) ]]
        then
            fade_duration=$(echo "scale=2;$transition_duration/2" | bc)
            fadeout_start=$(echo "scale=2;$duration+$offset-$transition_duration" | bc)
            video+=", format=yuv420p, fade=t=in:st=0:d=${fade_duration}:color=black, fade=t=out:st=${fadeout_start}:d=${fade_duration}:color=black"
            audio+=", afade=t=in:st=0:d=${fade_duration}, afade=t=out:st=${fadeout_start}:d=${fade_duration}"
        fi

        audio_alias="a${i}"
        video_alias="v${i}"

        if [[ $i -lt $(expr $# - 1) ]]
        then
            audio+=" [${audio_alias}]"
            video+=" [${video_alias}]"
        fi
        
        filters+=( "$video;" "$audio;" )
    else
        audio_alias="0:a"
        video_alias="0"
    fi

    offset=$(echo "scale=2;$duration+$offset-$transition_duration" | bc)
    i=$((i + 1));
done

# Run in background
logfile="./.ffmpeg.job"
> $logfile # Flush file

command="ffmpeg -hide_banner -loglevel error -progress \"$logfile\" \
-y ${inputs[@]} -filter_complex \"${filters[@]}\" \
-movflags +faststart -c:v libx264 -c:a aac $output 2>/dev/null &"
eval " $command"

# echo $command
# exit

ffmpeg_pid="${!}"

current_frame=0; previous_frame=0
trap cleanup SIGINT QUIT

while kill -0 $ffmpeg_pid 2> /dev/null; do
    current_frame=$(awk -F "=" '/^frame=([0-9])/ {a=$2} END{print a}' $logfile)

    if [[ -n "$abort" ]]; then
        echo ""
        echo "Aborting…"
        [[ -e "${output}" ]] && rm "${output}"
        break
    fi
    
    sleep .5

    if [[ $current_frame -gt $previous_frame ]]
    then
        previous_frame=$current_frame
        percentage=$(( 100 * previous_frame / totalframes ))
    fi

    [[ -z "$percentage" ]] && percentage=-1
    if [[ $percentage -lt 0 ]]
    then
        printf "\rPreparing encoding $totalframes frames…\033[0K\r"
    else
        printf "\rEncoding $percentage%% (frame $previous_frame/$totalframes)\033[0K\r"
    fi
done

if wait "${ffmpeg_pid}" > /dev/null; then
	echo "\nEncoding Complete!"
else
	exit 1
fi
[[ -e "${logfile}" ]] && rm "${logfile}"

trap - SIGINT QUIT

printf "\rInjecting spatial metadata…\033[0K\r"
exiftool -XMP-GSpherical:Spherical="true" -XMP-GSpherical:Stitched="true" -XMP-GSpherical:ProjectionType="equirectangular" -XMP-GSpherical:StereoMode="mono" -overwrite_original $output  2>/dev/null
printf "\rSpatial metadata injected!\033[0K\r"